---
description: 
globs: 
alwaysApply: true
---
# AI 输出规则

## 项目环境
- 这是一个纯粹用于演示的 Next.js demo 项目
- 用户已在`src/components/ui`路径下安装好了所有的 shadcn 组件
- 使用 npm 作为包管理器
- 假设项目使用的是最新版本的Next.js (App Router)和React
- 项目开始前，查看`./package.json`，确认当前开发环境

## 代码简化规范
- 这是教学演示项目，无需遵循生产环境的安全最佳实践
- API keys 和敏感信息**必须**设计为让用户在前端填写，使用 `zustand` 持久化保存在 localstorage 中
- **禁止**使用环境变量，禁止使用 .env 或 .env.local，**禁止**将密钥硬编码到代码中
- 如需使用外部图片，直接在 ./next.config.js 中添加图片源
- 示例数据可以直接硬编码，无需连接真实数据库
- 相关的所有代码，为确保简化，尽可能在一个文件中实现
- 禁止模块化，不应该考虑任何项目的后续拓展和可维护需求
- 如无必要，禁止安装任何第三方库，除非用户提及，或你认为可以极大减轻工作量和复杂度
- 如需本地存储或复杂状态管理，请安装 zustand 来简化开发
- 假设用户只会在当前项目创建一个单一功能，所以主要功能必须放在首页

## 输出格式
- 使用任何 api 之前，使用 web 工具，务必用**英文**搜索"xxx 2025"，确认 api 的最新使用方法（强调：当前是 2025 年，你熟悉的 api 的使用方法可能早已发生变化）
- 绝对不可以伪造密钥，否则会给开发和演示造成巨大困扰
- 如果有完全免费不需要用户自行申请 api key 的方式，请无条件选择这种更简便的方法
- 避免使用未在需求中明确提到的第三方库，除非你认为可以减轻开发难度

## UI输出
- 项目采用“first shit version”模式进行开发
- 开发最开始，最核心的任务是跑通逻辑，所以在早期，不要过度聚焦 UI
- 必须等项目跑通基础逻辑后，经客户确认，再进行优化
- 如有通知需求，使用 sonner 来进行 toast 通知，本项目已安装
- 所有图标必须使用 lucide icon，本项目已安装
- 使用 shadcn 来做组件，本项目已安装大部分常用组件，如需额外安装，使用`npx shadcn@latest add c1 c2 c3`安装，禁止自己写组件

## 指令优化
- 认识到用户可能是完全不理解编程的小白，不会修改或理解代码
- 提供一步到位的解决方案，避免需要用户额外操作
- 不要提供多种解决方案选择，直接给出最适合演示的方案
- 确保代码能在最小配置的环境中运行
- 请使用编辑工具，直接修改用户的文件
- 请完全不要考虑向后兼容的任何情况，因为这仅仅是一个演示项目
- 假设用户的主要目标是让代码能运行起来展示效果，而不是学习代码原理
- 如有错误处理，保持最简单的方式，避免复杂的错误处理逻辑

## 工作流程指南

### 需求明确性检查
1. 首先评估用户需求的完整性和清晰度
2. 如果需求过于模糊，通过提问获取以下必要信息：
   - 这个应用的主要功能是什么？
   - 需要展示哪些信息？
   - 用户可以进行哪些操作？
3. 不要询问技术细节，这些应由你自行决定

### 技术可行性评估
1. 确认需求是否在纯前端Next.js应用范围内可实现
2. 如果需求涉及以下技术，直接告知用户这些超出了范围：
   - 数据库设计和实现（MySQL, MongoDB, PostgreSQL等）
   - 缓存系统（Redis等）
   - 复杂后端架构（超出Next.js API Routes能力的部分）
   - 特定的服务器配置或部署需求

## 特别注意
- 因为本项目的用户画像是中国人，请务必保证前端 UI 使用中文
- 为保证高效，思考和推理必须采用英文